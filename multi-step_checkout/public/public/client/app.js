class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      steps: [Checkout, FormOne, FormTwo, FormThree, Purchase],
      currentView: Checkout,
      currentForm: {}
    };
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleNext(e) {
    this.setState({
      currentView: this.state.steps[this.state.steps.indexOf(this.state.currentView) + 1 || 0]
    });
    e.preventDefault();
    fetch('/', {
      method: 'POST',
      body: JSON.stringify(this.state.currentForm),
      headers: {
        "Content-type": "application/json"
      }
    }).then(res => res.json()).then(response => console.log('Success:', JSON.stringify(response))).catch(error => console.error('Error:', error));
  }

  handleSubmit(e) {
    e.preventDefault();
    fetch('/', {
      method: 'POST',
      body: JSON.stringify(this.state.currentForm),
      headers: {
        "Content-type": "application/json"
      }
    }).then(res => res.json()).then(response => console.log('Success:', JSON.stringify(response))).catch(error => console.error('Error:', error));
  }

  handleFormChange(e) {
    let value = e.target.value;
    let newForm = this.state.currentForm;
    newForm[e.target.name] = value;
    this.setState({
      currentForm: newForm
    });
  }

  render() {
    return React.createElement('div', { id: 'container' }, React.createElement(this.state.currentView, { onChange: e => this.handleFormChange(e), onClick: e => this.handleNext(e), onclick: e => this.handleSubmit(e) }));
  }
}

const Checkout = props => React.createElement('button', { onClick: props.onClick }, 'Checkout');

const FormOne = props => React.createElement('div', { id: 'formOne', 'class': 'form-style-8' }, React.createElement('h4', null, 'Account Information'), React.createElement('form', null, 'Name:', React.createElement('input', { type: 'text', name: 'name', id: 'name', placeholder: 'enter your name', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'Email:', React.createElement('input', { type: 'email', name: 'email', id: 'email', placeholder: 'enter your email', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'Password:', React.createElement('input', { type: 'password', id: 'password', name: 'password', placeholder: 'enter your password', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), React.createElement('input', { type: 'submit', value: 'Next', onClick: props.onClick })));

const FormTwo = props => React.createElement('div', { id: 'formTwo', 'class': 'form-style-8' }, React.createElement('h4', null, 'Shipping Information'), React.createElement('form', null, 'Address:', React.createElement('input', { type: 'text', name: 'firstLine', id: 'firstLine', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'Apt:', React.createElement('input', { type: 'text', name: 'secondLine', id: 'secondLine', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'City:', React.createElement('input', { type: 'text', name: 'city', id: 'city', placeholder: 'enter your city', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'State:', React.createElement('input', { type: 'text', name: 'state', id: 'state', placeholder: 'enter your state', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'Zipcode:', React.createElement('input', { type: 'number', name: 'zipcode', id: 'zipcode', placeholder: 'enter your zipcode', onChange: props.onChange }), React.createElement('br', null), ' ', React.createElement('br', null), React.createElement('input', { type: 'submit', value: 'Next', onClick: props.onClick })));

const FormThree = props => React.createElement('div', { id: 'formThree', 'class': 'form-style-8' }, React.createElement('h4', null, 'Credit Card Information'), React.createElement('form', null, 'Credit Card #:', React.createElement('input', { type: 'number', name: 'creditCard', id: 'creditCard', placeholder: 'enter your credit card information', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'Expirate Date:', React.createElement('input', { type: 'date', name: 'expiration', id: 'expiration', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'CVV:', React.createElement('input', { type: 'number', name: 'cvv', placeholder: 'cvv', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), 'Billing Zipcode:', React.createElement('input', { type: 'number', name: 'billingZip', id: 'billingZip', placeholder: 'enter billing zipcode', onChange: props.onChange }), React.createElement('br', null), React.createElement('br', null), React.createElement('input', { type: 'submit', value: 'Next', onClick: props.onClick, onChange: props.onChange })));

const Purchase = props => React.createElement('div', { id: 'purchase' }, React.createElement('h4', null, 'Confirmation'), React.createElement('button', { id: 'confirm-button', onClick: props.onclick }, 'Confirm Purchase'));

ReactDOM.render(React.createElement(App, null), document.getElementById('app'));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,